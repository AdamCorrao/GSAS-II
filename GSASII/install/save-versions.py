# record tag number and git hash into the git_version.py file.
#
import os
import sys
import datetime as dt
import git

# get location of the GSAS-II files
# assumed to be the parent of location of this file
path2GSAS2 = os.path.dirname(os.path.dirname(
    os.path.abspath(os.path.expanduser(__file__))))
# and the repo is in the parent of that
path2repo = os.path.dirname(path2GSAS2)

if __name__ == '__main__':

    g2repo = git.Repo(path2repo)
#    if g2repo.active_branch.name != 'master':
#        print(f'Not on master branch {commit0[:6]!r}')
#        sys.exit()
    if g2repo.head.is_detached:
        print(f'Detached head {commit0[:6]!r}')
        sys.exit()
    # create a file with GSAS-II version information
    try:
        g2repo = git.Repo(path2repo)
    except:
        print('Launch of gitpython for version file failed'+
                  f' with path {path2repo}')
        sys.exit()
    commit = g2repo.head.commit
    ctim = commit.committed_datetime.strftime('%d-%b-%Y %H:%M')
    now = dt.datetime.now().replace(
        tzinfo=commit.committed_datetime.tzinfo)
    commit0 = commit.hexsha
    tags0 = g2repo.git.tag('--points-at',commit).split('\n')
    history = list(g2repo.iter_commits('HEAD'))
    for i in history[1:]:
        tags = g2repo.git.tag('--points-at',i)
        if not tags: continue
        commitm1 = i.hexsha
        tagsm1 = tags.split('\n')
        break
    pyfile = os.path.join(path2GSAS2,'git_verinfo.py')
    try:
        fp = open(pyfile,'w')
    except:
        print(f'Creation of git version file {pyfile} failed')
        sys.exit()
    fp.write('# -*- coding: utf-8 -*-\n')
    fp.write(f'# {os.path.split(pyfile)[1]} - GSAS-II version info from git\n')
    fp.write(f'# Do not edit, generated by {" ".join(sys.argv)!r} script\n')
    fp.write(f'# Created {now}\n\n')
    fp.write(f'git_version = {commit0!r}\n')
    if tags:
        fp.write(f'git_tags = {tags0}\n')
    else:
        fp.write('git_tags = []\n')
    fp.write(f'git_prevtaggedversion = {commitm1!r}\n')
    fp.write(f'git_prevtags = {tagsm1}\n')
    fp.close()
    print(f'Created git version file {pyfile} at {now} for {commit0[:6]!r}')
